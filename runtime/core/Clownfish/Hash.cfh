/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/**
 * Hashtable.
 *
 * Values are stored by reference and may be any kind of Obj.
 */
public class Clownfish::Hash inherits Clownfish::Obj {

    void          *entries;
    uint32_t       capacity;
    uint32_t       size;
    uint32_t       threshold;    /* rehashing trigger point */

    inert void
    init_class();

    public inert incremented Hash*
    new(uint32_t capacity = 0);

    /**
     * @param capacity The number of elements that the hash will be asked to
     * hold initially.
     */
    public inert Hash*
    init(Hash *self, uint32_t capacity = 0);

    inert String*
    get_tombstone();

    /** Empty the hash of all key-value pairs.
     */
    public void
    Clear(Hash *self);

    /** Store a key-value pair.
     */
    public void
    Store(Hash *self, String *key, decremented Obj *value);

    public void
    Store_Utf8(Hash *self, const char *str, size_t len,
               decremented Obj *value);

    /** Fetch the value associated with `key`.
     *
     * @return the value, or NULL if `key` is not present.
     */
    public nullable Obj*
    Fetch(Hash *self, String *key);

    public nullable Obj*
    Fetch_Utf8(Hash *self, const char *key, size_t key_len);

    /** Attempt to delete a key-value pair from the hash.
     *
     * @return the value if `key` exists and thus deletion
     * succeeds; otherwise NULL.
     */
    public incremented nullable Obj*
    Delete(Hash *self, String *key);

    public incremented nullable Obj*
    Delete_Utf8(Hash *self, const char *key, size_t key_len);

    /** Search for a key which Equals the key supplied, and return the key
     * rather than its value.
     */
    nullable String*
    Find_Key(Hash *self, String *key, int32_t hash_sum);

    /** Return an VArray of pointers to the hash's keys.
     */
    public incremented VArray*
    Keys(Hash *self);

    /** Return an VArray of pointers to the hash's values.
     */
    public incremented VArray*
    Values(Hash *self);

    uint32_t
    Get_Capacity(Hash *self);

    /** Accessor for Hash's "size" member.
     *
     * @return the number of key-value pairs.
     */
    public uint32_t
    Get_Size(Hash *self);

    public bool
    Equals(Hash *self, Obj *other);

    public void
    Destroy(Hash *self);

    /** Clone the Hash but merely increment the refcount of its elements
     * rather than clone them.
     */
    incremented Hash*
    Shallow_Copy(Hash *self);

    /** Dupe the Hash, cloning each internal element.
     */
    public incremented Hash*
    Clone(Hash *self);
}


